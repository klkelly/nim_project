Keven Kelly, 1155664, klkelly
Rafaella Gra√±a, 1531909, graa

CMPUT 274 Fall 2018
Final Project: The Game of Nim

*****

File contents: main.py, README

*****

NOTE: It is expected that running this software, the user has installed Python version 3.5 or later, and has not uninstalled the tkinter package that is distrubed as part of the Python installation! Because of the interface of this game involves click-buttons it is recommended the user have a mouse (although TAB to shift through options and SPACEBAR to 'click' buttons also works!)


The Game of Nim is a GUI implementation of a Nim game. For information about Nim, please see wikipedia: https://en.wikipedia.org/wiki/Nim

The game itself is a mathematical strategy game, where two players attempt to remove objects from a pile (in our game, we call them 'stacks', because this is Computing Science, after all). They both attempt to be the person to take the last piece from the game, or to force the other player to be the one to take the last piece, depending on the game mode.

The game runs in a window using the tkinter package. Options and moves within the game are conducted with a click-button interface.

Usage:
    Move directory in terminal to directory of main.py, and type
        'python3 main.py'

    The game will open in a new window, at the start screen.
    Select the mode of play as well as optional settings by clicking the boxes to select them.

        Game modes are:
            1vCPU: The player plays against a computer AI opponent - very hard for the classic version, quite rudimentary and easy for the greedy version.

            1v1: Two players take turns playing against each other.

        Game types are:
            Misere: The last player to pick up a piece from the last stack loses the game. This is a game of avoision: try to produce a situation where the opponent must pick up the last piece.

            Normal: A normal game mode, where the player to pick up the final piece from the last stack wins the game. This is a classic style game, where the final active turn wins the game, i.e., you want to produce a situation where you end up becoming the person to pick up the final piece.

        Optional settings are:
            Classic: 3 stacks of randomly determined values from 1-9 are generated. Players can take from any stack, and can take as many items as they want.

            Greedy: 3 stacks of randomly determined values from 1-9 are generated. Players are restricted to taking only from the largest present stack.

            Custom: The user can define the number of stacks to be generated, from 1 to 9, and then can select game types and modes as well as choose to play classic or greedy style rules.

    Click 'Rules' to read the rules of the Nim game (including the difference between misere and normal modes, as well as the idea behind the greedy version of the game)

        Click 'Back to menu' to return to game-selection menu.

    Click Quit (at any time, in any menu) to close the application.

    Once the desired options are selected, click 'Start Game' to begin gameplay.

    In gameplay:

        Clicking one of the stack buttons will decrement its value (if it is a valid move). To conclude the turn, click 'Finish Turn' button.

        As stacks become unavailable for selection, they will be grayed out. Returning to main menu via 'Back to menu' button will end the game prematurely - a new game can be started from this point.

        Game ends when a victory condition has been achieved: someone has taken the last piece from the last stack (i.e. all the stacks == 0).

            When the game has ended, the 'Finish Turn' button will be disabled; to continue, either click 'Back to menu' or 'Quit'.

Objects:
    
    Nim(Frame): a widget that inherits from its Frame parent. Frame is a preset class of tkinter. It is the main object that contains all the other components of the game.

        callconstructor(self, ref): calls the __init__ method of the parent, pasing ref as the argument
            args: ref. reference to a widget parent instance

        __init__(self, master=None): initializes attributes, creates children widgets and calls the mainmenu method
            args: master. reference to widget parent instance

        mainmenu(self): displays the start widget and removes any other widget from screen. Is called when menuButton is pressed

        rules(self): displays the instructions widget and removes any other widget from screen. Is called when rulesButton is pressed

        custom(self): displays the diy widget and removes any other widget from screen. Is called when cuButton is pressed

        play(self): displays the game widget and removes any other widget from screen. Is called when startButton is pressed

        quit(self): destroys parent object and exits program. Is called when quitButton is pressed


    start(Nim): a widget that inherits from its Nim parent. It contains the widgets that are shown on the main menu of the game.
        __init__(self, master=None): initializes by calling granparent constructor, calls make_widgets
            args: master. reference to widget parent instance

        make_widgets(self): creates all visible widgets and places them on the screen

        mode_CPU(self,var): gets called when vCPUbutton or vPbutton is pressed. Sets new CPU and enables or diables respective buttons
            args: var. bool, either 1 or 0 depending on whether game is against the computer or another player

        misere(self,var): gets called when mButton or nButton is pressed. Sets misere or normal mode and enables or diables respective buttons.
            args: var. bool, either 1 or 0 depending on which mode was clicked

        change_mode(self,var): gets called when grButton or clButton is pressed. Sets greedy or classic version of game and enables or disables respective buttons 
            args: var. bool, either 1 or 0 depending on which version was selected

        quit(self): calls parent quit method

    
    game(Nim): a widget that inherits from its Nim parent. It contains the widgets that are shown during the gameplay of the game.

        __init__(self,master=None): initializes itself by calling grandparent constructor, initializes attributes, calls make_widgets
            args: master. reference to widget parent instance
        
        make_widgets(self): creates all visible widgets and places them on the screen

        game_tag(self): returns a string that describes the kind of game being playes.
    
        remove_one(self,a): When a stack is clicked, this method is called. Removes one from the selected stack. Does nothing if selected stack is different from one previously selected (if user clicks two different stacks during their turn). Does nothing if user clicks a small stack in greedy version. Handles the case when stack becomes 0. Checks for a win condition by calling check_win.
            args: a. int, index of selected stack
        
        check_win(self): checks is the game has been won. Checks if all stacks have been exhausted. Records who's turn was last. Updates turn label to state who won. Disables nextButton.

        next_turn(self): Called when nextButton is pressed. Does nothing if user has not clicked on a stack yet. Changes whose turn it is, makes selected be none. Triggers CPU turn if enabled, checks for a win after CPU, if no one won, it updates the turn again.

        cpu_turn(self): Called after a user's turn if CPU player has been enabled. Determines what action the CPU player does according to the game settings. Has O(n) notation.

        print_turn(self): Called when turn lable needs updating. It displays the current status of the game.

        quit(self): calls parent quit method


    instructions(Nim): a widget that inherits from its Nim parent. It contains the widgets that show the rules.

        __init__(self,master=None): initializes itself by calling grandparent constructor, calls make_widgets
            args: master. reference to widget parent instance

        make_widgets(self): creates all visible widgets and places them on the screen

        quit(self): calls parent quit method
    
    
    diy(Nim): a widget that inherits from its Nim parent. It contains the widgets that are shown in the customization state of the game

        __init__(self, master=None): initializes by calling granparent constructor, initialized stack attribute calls make_widgets
            args: master. reference to widget parent instance
        
        change_stack(self,num): changes the number of stacks. Is called every time the slider is used
            args: num, int number of stacks set by the user

        mode_CPU(self,var): gets called when vCPUbutton or vPbutton is pressed. Sets new CPU and enables or diables respective buttons
            args: var. bool, either 1 or 0, depending on whether game is against the computer or another player

        misere(self,var): gets called when mButton or nButton is pressed. Sets misere or normal mode and enables or diables respective buttons.
            args: var. bool, either 1 or 0 depending on which mode was clicked

        change_mode(self,var): gets called when grButton or clButton is pressed. Sets greedy or classic version of game and enables or disables respective buttons 
            args: var, bool, either 1 or 0 depending on which version was selected

        quit(self): calls parent quit method
    



